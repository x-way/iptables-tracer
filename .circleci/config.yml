version: 2
workflows:
  version: 2
  build:
    jobs:
      - build-latest
      - build-1.14
      - build-1.15
  scheduled:
    triggers:
      - schedule:
          cron: "1 2 * * 5"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-latest
      - build-1.14
      - build-1.15

jobs:
  build-latest: &build-template
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout
      - run: uname -a
      - run: go version
      - run: go env
      - run: go vet -v ./...
      - run:
          name: golint
          command: |
                    go get -u golang.org/x/lint/golint
                    golint -set_exit_status ./...
      - run:
          name: staticcheck.io
          command: |
                    go get honnef.co/go/tools/cmd/staticcheck
                    staticcheck -checks all ./...
      - run:
          name: Check gofumports formatting
          command: |
                    go get mvdan.cc/gofumpt/gofumports
                    gofumports -d .
                    [ -z "$(gofumports -l .)" ]
      - run:
          name: Run go tests
          environment:
            GOTESTSUM_JUNITFILE: /tmp/test-reports/gotests/junit.xml
          command: |
                    mkdir -p /tmp/test-reports/gotests
                    PATH=/tmp/sbin:$PATH gotestsum
      - run:
          name: Create coverage report
          command: |
                    mkdir -p /tmp/test-artifacts
                    PATH=/tmp/sbin:$PATH go test -race -coverprofile=coverage.txt -covermode=atomic
                    go tool cover -html=coverage.txt -o coverage.html
                    mv coverage.html /tmp/test-artifacts
      - run:
          name: Codecov coverage upload
          command: |
                    bash <(curl -s https://codecov.io/bash)
      - run:
          name: Codacy coverage upload
          command: |
                    go get github.com/schrej/godacov
                    godacov -t $CODACY_PROJECT_TOKEN -r coverage.txt -c $CIRCLE_SHA1
      - store_test_results:
          path: /tmp/test-reports
      - store_artifacts:
          path: /tmp/test-artifacts

  build-1.14:
    <<: *build-template
    docker:
      - image: circleci/golang:1.14

  build-1.15:
    <<: *build-template
    docker:
      - image: circleci/golang:1.15
